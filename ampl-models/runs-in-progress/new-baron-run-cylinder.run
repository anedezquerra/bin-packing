option solver baron;
option baron_options "\
maxtime=1200 \
absreq=1e-6 \
relreq=1e-6 \
numloc=10 \
prfreq=10000 \
outlev=2 \
keep=1 \
brvarstrategy=4 \
nodecuts=3";

printf "---------------------------- NEOS Job Metadata ----------------------------\n";
printf "NEOS Job ID: $neos_job\n";
printf "BARON Version: $baron_version\n\n";

solve;

printf "\n---------------------------- Solver Status Report ----------------------------\n";
display solve_result_num, solve_result, solve_message;

printf "\n---------------------------- Problem Dimensions ----------------------------\n";
printf "Variables: %d\n", _nvars;
printf "Constraints: %d\n", _ncons;
printf "Discrete Variables: %d\n", _baron_discvars;
printf "Nonlinear Constraints: %d\n", _baron_nlcons;

printf "\n---------------------------- Performance Metrics ----------------------------\n";
display _solve_elapsed_time, _total_solve_time, _ampl_elapsed_time;
display _baron_iter, _baron_nodes, _baron_localopt, _baron_poolsize;
display _baron_gap, _baron_bestbound, _baron_obj;

printf "\n---------------------------- Solution Geometry ----------------------------\n";
display container_type, geometric_conservation, card(figures);
display radius, height, softness;

printf "\n---------------------------- Optimized Coordinates ----------------------------\n";
param coords_fmt {i in figures, j in 1..3} := 
    if abs(coords[i,j]) < 1e-6 then 0 else coords[i,j];
    
for {i in figures} {
    printf "Figure %2d: (%8.4f, %8.4f, %8.4f)\n", 
        i, coords_fmt[i,1], coords_fmt[i,2], coords_fmt[i,3];
}

printf "\n---------------------------- Inter-Figure Distances ----------------------------\n";
param dist_matrix {i in figures, j in figures: i < j} := 
    sqrt(sum{k in 1..3} (coords[i,k] - coords[j,k])^2);
display dist_matrix;

printf "\n---------------------------- Volume & Surface Metrics ----------------------------\n";
display tetrahedron_volume, tetrahedron_surface_area;

printf "\n---------------------------- Termination Diagnostics ----------------------------\n";
display _baron_termination_condition, _baron_restarts, _baron_nlpstatus;

quit;